// Code generated by MockGen. DO NOT EDIT.
// Source: runner/runner_factory.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	runner "github.com/ayashkov/k8srun/runner"
	gomock "github.com/golang/mock/gomock"
)

// MockRunnerFactory is a mock of RunnerFactory interface.
type MockRunnerFactory struct {
	ctrl     *gomock.Controller
	recorder *MockRunnerFactoryMockRecorder
}

// MockRunnerFactoryMockRecorder is the mock recorder for MockRunnerFactory.
type MockRunnerFactoryMockRecorder struct {
	mock *MockRunnerFactory
}

// NewMockRunnerFactory creates a new mock instance.
func NewMockRunnerFactory(ctrl *gomock.Controller) *MockRunnerFactory {
	mock := &MockRunnerFactory{ctrl: ctrl}
	mock.recorder = &MockRunnerFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRunnerFactory) EXPECT() *MockRunnerFactoryMockRecorder {
	return m.recorder
}

// New mocks base method.
func (m *MockRunnerFactory) New(kubeconfig string) runner.Runner {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "New", kubeconfig)
	ret0, _ := ret[0].(runner.Runner)
	return ret0
}

// New indicates an expected call of New.
func (mr *MockRunnerFactoryMockRecorder) New(kubeconfig interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "New", reflect.TypeOf((*MockRunnerFactory)(nil).New), kubeconfig)
}
