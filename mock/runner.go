// Code generated by MockGen. DO NOT EDIT.
// Source: runner/runner.go

// Package mock is a generated GoMock package.
package mock

import (
	io "io"
	reflect "reflect"

	runner "github.com/ayashkov/k8srun/runner"
	gomock "github.com/golang/mock/gomock"
)

// MockRunner is a mock of Runner interface.
type MockRunner struct {
	ctrl     *gomock.Controller
	recorder *MockRunnerMockRecorder
}

// MockRunnerMockRecorder is the mock recorder for MockRunner.
type MockRunnerMockRecorder struct {
	mock *MockRunner
}

// NewMockRunner creates a new mock instance.
func NewMockRunner(ctrl *gomock.Controller) *MockRunner {
	mock := &MockRunner{ctrl: ctrl}
	mock.recorder = &MockRunnerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRunner) EXPECT() *MockRunnerMockRecorder {
	return m.recorder
}

// Run mocks base method.
func (m *MockRunner) Run(job *runner.Job, out io.Writer) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run", job, out)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Run indicates an expected call of Run.
func (mr *MockRunnerMockRecorder) Run(job, out interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockRunner)(nil).Run), job, out)
}

// Start mocks base method.
func (m *MockRunner) Start(job *runner.Job) (*runner.Execution, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start", job)
	ret0, _ := ret[0].(*runner.Execution)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Start indicates an expected call of Start.
func (mr *MockRunnerMockRecorder) Start(job interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockRunner)(nil).Start), job)
}
